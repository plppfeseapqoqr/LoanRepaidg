// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SimpleLending {
    address public owner;
    mapping(address => uint256) public balances;
    mapping(address => uint256) public loanDueDates;

    event LoanIssued(address borrower, uint256 amount, uint256 dueDate);
    event LoanRepaid(address borrower, uint256 amount);

    modifier onlyOwner() {
        require(msg.sender == owner, "Not the owner");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    function borrow(uint256 amount, uint256 durationDays) external payable {
        require(amount > 0, "Borrow amount must be greater than 0");
        require(balances[msg.sender] == 0, "You have an existing loan");

        uint256 interest = calculateInterest(amount, durationDays);
        uint256 totalAmount = amount + interest;

        // Transfer total amount to borrower
        require(msg.value == totalAmount, "Incorrect loan amount");
        
        // Update balances and loan due date
        balances[msg.sender] += totalAmount;
        loanDueDates[msg.sender] = block.timestamp + (durationDays * 1 days);

        emit LoanIssued(msg.sender, totalAmount, loanDueDates[msg.sender]);
    }

    function repay() external payable {
        require(balances[msg.sender] > 0, "No existing loan");
        
        // Check if repayment is on time
        require(block.timestamp <= loanDueDates[msg.sender], "Loan is overdue");

        // Transfer repaid amount to owner
        payable(owner).transfer(msg.value);

        // Clear borrower's balances and loan due date
        balances[msg.sender] = 0;
        loanDueDates[msg.sender] = 0;

        emit LoanRepaid(msg.sender, msg.value);
    }

    function calculateInterest(uint256 amount, uint256 durationDays) internal pure returns (uint256) {
        // Simple interest calculation for demonstration purposes
        uint256 annualInterestRate = 5; // 5% annual interest rate
        uint256 dailyInterestRate = (annualInterestRate * 1e18) / 36500; // Daily interest rate
        return (amount * dailyInterestRate * durationDays) / 1e18;
    }

    function getLoanDetails() external view returns (uint256, uint256) {
        return (balances[msg.sender], loanDueDates[msg.sender]);
    }
}
